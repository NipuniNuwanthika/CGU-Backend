# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-mysql
app: product-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**


functions:
  UserRegistrationAPI:
    handler: Controller/users.handler
    events:
        - http:
            path: /users
            method: post
            cors: true
        - http:
            path: /users/check/{email}
            method: get
            cors: true
  AdminRegistrationAPI:
    handler: Controller/admins.handler
    events:
        - http:
            path: /admins
            method: post
            cors: true
        - http:
            path: /admins
            method: get
            cors: true         
  programAPI:
    handler: Controller/programs.handler
    events:
      - http:
          path: /programs
          method: post
          cors: true
      - http:
          path: /programs
          method: get
          cors: true
      - http:
          path: /programs/past
          method: get
          cors: true
      - http:
          path: /programs/{programId}
          method: get
          cors: true
      - http:
          path: /programs/{programId}
          method: delete
          cors: true
      - http:
          path: /programs/{programId}
          method: put
          cors: true
      - http:
            path: /programs/programType/{programCat}
            method: get
            cors: true
        
  com-sessionAPI:
    handler: Controller/com-sessions.handler
    events:
        - http:
            path: /comSessions/pending
            method: get
            cors: true
        - http:
            path: /comSessions/past
            method: get
            cors: true
        - http:
            path: /comSessions/accepted
            method: get
            cors: true
        - http:
            path: /comSessions
            method: post
            cors: true
        - http:
            path: /comSessions/{sessionId}
            method: put
            cors: true
        - http:
            path: /comSessions/{sessionId}
            method: delete
            cors: true
        - http:
            path: /comSessions/{sessionId}
            method: get
            cors: true
        - http:
            path: /company/{companyEmail}
            method: get
            cors: true
  registerEventAPI:
    handler: Controller/registerEvent.handler
    events:
        - http:
            path: /registerEvent
            method: post
            cors: true
        - http:
            path: /registerEvent/{eventId}
            method: get
            cors: true
  registerSessionAPI:
    handler: Controller/registerSession.handler
    events:
        - http:
            path: /registerSession
            method: post
            cors: true
        - http:
            path: /registerSession/{eventId}
            method: get
            cors: true
  vacanciesAPI:
    handler: Controller/vacancies.handler
    events:
      - http:
          path: /vacancies/applyVacancies/{id}
          method: get
          cors: true        
      - http:
          path: /vacancies/
          method: post
          cors: true
      - http:
          path: /vacancies/{vacancyId}
          method: put
          cors: true
      - http:
          path: /vacancies/
          method: get
          cors: true
      - http:
          path: /vacancies/pendingVacancy/
          method: get
          cors: true
      - http:
          path: /vacancies/acceptedvacancy/
          method: get
          cors: true
      - http:
          path: /vacancies/acceptedvacancies/
          method: get
          cors: true
      - http:
          path: /vacancies/{vacancyId}
          method: get
          cors: true
      - http:
          path: /vacancies/acceptedvacancies/{vacancyId}
          method: get
          cors: true
      - http:
          path: /vacancies/{vacancyId}
          method: delete
          cors: true
      - http:
          path: /vacancies/delete/{vacancyId}
          method: delete
          cors: true
      - http:
          path: /vacancies/apply/
          method: post
          cors: true
      - http:
          path: /vacancies/apply
          method: get
          cors: true
      - http:
          path: /vacancies/filterVacancies/{vacancyType}
          method: get
          cors: true
  consultantAPI:
    handler: Controller/consultants.handler
    events:
      - http:
          path: /consultants/add
          method: post
          cors: true
      - http:
          path: /consultants/list
          method: get
          cors: true
      - http:
          path: /consultants/view/{consultantId}
          method: get
          cors: true
      - http:
          path: /consultants/delete/{consultantId}
          method: delete
          cors: true
      - http:
          path: /consultants/update/{consultantId}
          method: put
          cors: true
      - http:
          path: /consultants
          method: get
          cors: true
  albumAPI:
    handler: Controller/image-album.handler
    events:
      - http:
          path: /image-album
          method: post
          cors: true
      - http:
          path: /image-album
          method: get
          cors: true
      - http:
          path: /image-album/{album_Id}
          method: delete
          cors: true
      - http:
          path: /image-album/{album_Id}
          method: get
          cors: true
      - http:
          path: /image-album/{album_Id}
          method: put
          cors: true
      - http:
          path: /image-album/upload
          method: post
          cors: true
      - http:
          path: /image-album/upload
          method: get
          cors: true
  consultationAPI:
    handler: Controller/consultation.handler
    events:
      - http:
          path: /consultationReq/add/{consultantId}
          method: post
          cors: true
      - http:
          path: /consultation-Requests/list
          method: get
          cors: true
      - http:
          path: /scheduled-sessions/list
          method: get
          cors: true
      - http:
          path: /consultation-Requests/list/{sessionType}
          method: get
          cors: true
      - http:
          path: /consultation-sessions/list/{sessionType}
          method: get
          cors: true
      - http: 
          path: /scheduled-session/{consultation_id}
          method: put
          cors: true
      - http:
          path: /scheduled-session/delete/{consultation_id}
          method: delete
          cors: true
  satisfactionAPI:
    handler: Controller/satisfaction.handler
    events:
      - http:
          path: /satisfaction
          method: post
          cors: true
  adminAuthenticationAPI:
    handler: Controller/admin-login.handler
    events:
      - http:
          path: /admin/auth/login
          method: post
          cors: true
      - http:
          path: /admin/auth/logout
          method: delete
          cors: true
  authenticationAPI:
    handler: Controller/user-login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
      - http:
          path: /auth/logout
          method: delete
          cors: true  
  sendEmail:
    handler: controller/email.sendEmail
    events:
      - http:
          path: send-email
          method: POST
          cors: true
#   JWTToken:
#     handler: Controller/consultants.handler
#     events:
#       - http:
#           path: /generateJWTToken
#           method: POST
#           cors: true
       

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
  - serverless-dotenv
  - serverless-dotenv-plugin
custom:
  serverless-offline:
    noPrependStageInUrl: true
